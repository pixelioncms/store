<?php

//Yii::import('mod.shop.models.ShopProduct');
//Yii::import('mod.shop.models.ShopProductVariant');
//Yii::import('mod.shop.CartModule');

class Cart extends CComponent
{

    /**
     * Array of products added to cart.
     * E.g:
     * array(
     *      'product_id'      => 1,
     *      'variants'        => array(ShopProductVariant_id),
     *      'configurable_id' => 2, // Id of configurable product or false.
     *      'quantity'        => 3,
     *      'price'           => 123 // Price of one item
     * )
     * @var array
     */
    private $_items = array();

    /**
     * @var CHttpSession
     */
    private $session;


    public function init()
    {
        $this->session = Yii::app()->session;
        if (!isset($this->session['cart_data']) || !is_array($this->session['cart_data']))
            $this->session['cart_data'] = array();
    }

    /**
     * Add product to cart
     * <pre>
     *      Yii::app()->cart->add(array(
     *         'product_id'      => $model->id,
     *         'variants'        => $variants,// e.g: array(1,2,3,...)
     *         'configurable_id' => $configurable_id,
     *         'quantity'        => (int) Yii::app()->request->getPost('quantity', 1),
     *         'price'           => $model->price,
     *      ));
     * </pre>
     * @param array $data
     */
    public function add(array $data)
    {
        $itemIndex = $this->getItemIndex($data);

        $currentData = $this->getData();

        if (isset($currentData[$itemIndex])) {
            $currentData[$itemIndex]['quantity'] += (int)$data['quantity'];
            if ($currentData[$itemIndex]['quantity'] > 999) {
                $currentData[$itemIndex]['quantity'] = 999;
            }
        } else {
            $currentData[$itemIndex] = $data;
        }

        $this->session['cart_data'] = $currentData;
    }

    /**
     * Removed item from cart
     * @param $index string generated by self::getItemIndex() method
     */
    public function remove($index)
    {
        $currentData = $this->getData();

        if (isset($currentData[$index])) {
            unset($currentData[$index]);
            $this->session['cart_data'] = $currentData;
        }
    }

    /**
     * Clear all cart data
     */
    public function clear()
    {
        $this->session['cart_data'] = array();
    }

    /**
     * @return array current cart data
     */
    public function getData()
    {
        return $this->session['cart_data'];
    }

    /**
     * Load products added to cart
     * @return array
     */
    public function getDataWithModels()
    {
        $data = $this->getData();

        if (empty($data))
            return array();

        foreach ($data as $index => &$item) {
            $item['variant_models'] = array();
            $item['model'] = ShopProduct::model()
                //->cache(Yii::app()->controller->cacheTime)
                ->findByPk($item['product_id']);
            // Load configurable product
            if ($item['configurable_id'])
                $item['configurable_model'] = ShopProduct::model()
                    // ->cache(Yii::app()->controller->cacheTime)
                    ->findByPk($item['configurable_id']);

            // Process variants
            if (!empty($item['variants']))
                $item['variant_models'] = ShopProductVariant::model()
                    // ->cache(Yii::app()->controller->cacheTime)
                    ->with(array('attribute', 'option'))
                    ->findAllByPk($item['variants']);

            // If product was deleted during user session!.
            if (!$item['model'])
                unset($data[$index]);
        }
        unset($item);

        return $data;
    }

    /**
     * Count total price
     */
    public function getTotalPriceAllCurrency()
    {
        $total = array();
        $data = $this->getDataWithModels();
        foreach ($data as $item) {
            $configurable = isset($item['configurable_model']) ? $item['configurable_model'] : 0;
            if ($item['currency_id']) {
                $currency = ShopCurrency::model()
                    //->cache(Yii::app()->controller->cacheTime)
                    ->findByPk($item['currency_id']);
                // print_r($currency);
                $total[$currency->iso] += (ShopProduct::calculatePrices($item['model'], $item['variants'], $configurable) * $item['quantity']);
            } else {
                $total[Yii::app()->currency->main->iso] += ShopProduct::calculatePrices($item['model'], $item['variants'], $configurable) * $item['quantity'];
            }
        }
        return $total;
    }

    public function getBalancePrice()
    {
        $result = 0;
        $data = $this->getDataWithModels();

        foreach ($data as $item) {
            // print_r($item);


            $result += $item['model']->discountBalance[$item['category_id']] * $item['quantity'];
        }

        return $result;
    }

    /**
     * Count total price
     */
    public function getTotalPrice()
    {
        $result = 0;
        $data = $this->getDataWithModels();

        foreach ($data as $item) {
            $configurable = isset($item['configurable_model']) ? $item['configurable_model'] : 0;
            // if ($item['model']->getPriceByQuantity($item['quantity'])) {
            //$calcPrice = $item['model']->value;
            //     $result += $item['model']->value * $item['quantity'];
            // }else{
            $result += ShopProduct::calculatePrices($item['model'], $item['variants'], $configurable, $item['quantity']) * $item['quantity'];
            // }


        }

        return $result;
    }

    public function ajaxRecount($data)
    {
        if (!is_array($data) || empty($data))
            return;

        $currentData = $this->getData();
        $discountBalance = 0;


        foreach ($data as $index => $quantity) {

            if ((int)$quantity < 1)
                $quantity = 1;

            if (isset($currentData[$index])) {
                $currentData[$index]['quantity'] = (int)$quantity;
                $data = $currentData[$index];
                $productModel = ShopProduct::model()->findByPk((int)$data['product_id']);

                $calcPrice = ShopProduct::calculatePrices($productModel, $data['variants'], $data['configurable_id'], $data['quantity']);
                if ($data['configurable_id']) {

                    $rowTotal = $data['quantity'] * $calcPrice;
                } else {
                    if ($productModel->appliedDiscount) {
                        //$priceTotal = ;
                    } else {
                        $priceTotal = $data['price'];
                    }
                   // if (count($data['quantity']) > 1) {
                        if ($data['quantity'] > 1 && ($pr = $productModel->getPriceByQuantity($data['quantity']))) {
                            $calcPrice = $pr->value;
                        }
                   // }
                    $rowTotal = $data['quantity'] * $calcPrice;

                }
            }
        }
        $this->session['cart_data'] = $currentData;
        echo CJSON::encode(array(
            'unit_price' => Yii::app()->currency->number_format(Yii::app()->currency->convert($calcPrice)),
            'rowTotal' => Yii::app()->currency->number_format(Yii::app()->currency->convert($rowTotal)),
            'totalPrice' => Yii::app()->currency->number_format(Yii::app()->currency->convert($this->getTotalPrice())),
            //'balance' => Yii::app()->currency->number_format(Yii::app()->currency->convert(Yii::app()->cart->getBalancePrice()))
        ));
    }

    /**
     * Recount quantity by index
     * @param $data array(index=>quantity)
     */
    public function recount($data)
    {
        if (!is_array($data) || empty($data))
            return;

        $currentData = $this->getData();
        foreach ($data as $index => $quantity) {
            if ((int)$quantity < 1)
                $quantity = 1;

            if (isset($currentData[$index]))
                $currentData[$index]['quantity'] = (int)$quantity;
        }
        $this->session['cart_data'] = $currentData;
        // print_r($this->session['cart_data']);
        // die;
    }

    /**
     * @return int number of items in cart
     */
    public function countItems()
    {
        $result = 0;
        foreach ($this->session['cart_data'] as $row)
            $result += $row['quantity'];

        return $result;
    }

    /**
     * Create item index base on data
     * @param $data
     * @return string
     */
    public function getItemIndex($data)
    {
        return $data['product_id'] . implode('_', $data['variants']) . $data['configurable_id'];
    }


}
